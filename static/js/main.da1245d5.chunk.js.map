{"version":3,"sources":["Components/TodoItem.js","Components/Todos.js","Layout/Header.js","Components/AddTodo.js","Components/Pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textDecoration","props","todo","completed","this","id","title","className","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","background","color","border","borderRadius","cursor","float","padding","textAling","Todos","todos","map","key","headerStyle","textAlign","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","About","Fragment","App","console","log","filter","newTodo","uuid","class","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da1245d5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nclass TodoItem extends Component {\r\n    \r\n getStyle = () =>{\r\n     return{ textDecoration: this.props.todo.completed ? \r\n        'line-through' : 'none',\r\n       \r\n     }\r\n }\r\n\r\n\r\n    render() {\r\n        //destructuring\r\n        const {id,title} =this.props.todo;\r\n        \r\n        return (\r\n            <div className=\"todoitem\" style={this.getStyle()}>\r\n           \r\n            <p>  <input type=\"checkBox\" onChange={this.props.markComplete.bind(this, id)}/> {\" \"}\r\n            {title}\r\n            <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>X</button>\r\n            </p> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//PropTypes\r\nTodoItem.propTypes={\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background:\"#ff0000\",\r\n    color: \"#fff\",\r\n    border:'none',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float:'right',\r\n    padding:' 5px 7px 0px',\r\n    textAling: 'center'\r\n    \r\n}\r\nexport default TodoItem;\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Todos extends Component {\r\n    \r\n   \r\n\r\n    render() {\r\n        return this.props.todos.map((todo)=>(\r\n           <TodoItem key={todo.id} todo={todo}\r\n            markComplete={this.props.markComplete}\r\n            delTodo={this.props.delTodo}/>\r\n        ));\r\n    }\r\n}\r\n\r\n//PropTypes+\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style={{color:'#fff'}} to=\"\">Home</Link> | <Link to=\"/about\" style={{color:'#fff'}}>About</Link>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background:'#333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n    padding:'10px'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\n\r\nclass AddTodo extends Component {\r\n\r\n    state ={\r\n        title:''\r\n    }\r\n\r\n    //onValueChange\r\n    onChange =(e)=>{\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    onSubmit =(e)=> {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: ''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit}\r\n            style={{display : 'flex',padding: '5px'}}>\r\n                <input type=\"text\" \r\n                name=\"title\" \r\n                placeholder=\"Add Todo ...\" \r\n                style={{flex:'10'}}\r\n                value={this.state.title}\r\n                onChange={this.onChange}\r\n                className='btnval'\r\n                />\r\n                <input type=\"submit\" className=\"btn\" \r\n                value=\"Submit\"\r\n                style={{flex:'1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n    return (\r\n        //if don't want to use div use React.Fragment\r\n       <React.Fragment>\r\n       <h1>About</h1>\r\n       <p>This.is the TodoList app v1.0.0. It is a part\r\n        of a React crash course</p>\r\n        <h1>Devloped by shampy</h1>\r\n       </React.Fragment>\r\n    )\r\n}\r\nexport default About;","import React, { Component } from 'react';\nimport {BrowserRouter as Router,Route} from 'react-router-dom';\nimport Todos from './Components/Todos';\nimport Header from './Layout/Header';\nimport AddTodo from './Components/AddTodo';\nimport {v4 as uuid} from 'uuid';\nimport './App.css';\nimport About from './Components/Pages/About';\n\n\nclass App extends Component {\n  state = {\n    todos: [\n\n    ]\n  }\n\n  //Toggel commplete\n  markComplete = (id) =>{\n    console.log(id)\n    this.setState({\n      todos: this.state.todos.map(\n        todo => {\n          if(todo.id===id){\n            todo.completed= !todo.completed\n          }\n          return todo;\n        }\n      )\n    })\n  }\n\n  //deleteitem\n  delTodo = (id)=>{\n   this.setState({ todos: [...this.state.todos.filter(todo => \n    todo.id!==id)]})\n  }\n\n  //AddTodo\n  addTodo =(title)=>{\n    const newTodo = {\n      id: uuid(),\n      title: title,\n      completed: false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo]})\n}\n\n  render() {\n\n    return (\n      \n      <Router>\n      <div>\n      <div class=\"container\">\n        <Header/>\n          <Route exact path=\"\" render={props=>(\n            <React.Fragment>\n            <AddTodo addTodo={this.addTodo}/>\n          <Todos todos={this.state.todos} \n          markComplete ={this.markComplete}\n          delTodo={this.delTodo} />\n            </React.Fragment>\n          )}/>\n          <Route path=\"/about\" component={About}/>\n          \n      </div>\n      </div>\n      </Router>\n      \n      \n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}